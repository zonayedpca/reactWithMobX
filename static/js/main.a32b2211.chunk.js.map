{"version":3,"sources":["store.js","components/Header.js","components/Control.js","components/TableList.js","components/TableView.js","components/HighPrice.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["configure","enforceActions","Store","item","name","price","this","push","reduce","total","max","forEach","oneItem","decorate","observable","addNewItem","action","clearList","totalSum","computed","getHighValue","store","Header","react_default","a","createElement","className","Control","handleAddItem","prompt","length","parseInt","_this","props","handleClearItem","onClick","Component","TableList","_ref","TableView","map","index","key","observer","HighPrice","Footer","target","rel","href","App","components_Control","components_TableView","components_HighPrice","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a32b2211.chunk.js","sourcesContent":["import { decorate, observable, action, computed, configure } from 'mobx';\r\n\r\nconfigure({ enforceActions: 'never' })\r\n\r\nclass Store {\r\n  item = [{\r\n    name: 'Coca-cola',\r\n    price: 90\r\n  }, {\r\n    name: 'Oreo Biscuit',\r\n    price: 10\r\n  }, {\r\n    name: 'Shakes',\r\n    price: 900\r\n  }];\r\n\r\n  addNewItem(item) {\r\n    this.item.push(item);\r\n  }\r\n\r\n  clearList() {\r\n    this.item = [];\r\n  }\r\n\r\n  get totalSum() {\r\n    return this.item.reduce((total, item) => total += item.price, 0);\r\n  }\r\n\r\n  get getHighValue() {\r\n    let max = 0;\r\n    let item = null;\r\n    this.item.forEach(oneItem => {\r\n      if(oneItem.price > max) {\r\n        max = oneItem.price;\r\n        item = oneItem;\r\n      }\r\n    })\r\n    return item;\r\n  }\r\n}\r\n\r\ndecorate(Store, {\r\n  item: observable,\r\n  addNewItem: action,\r\n  clearList: action,\r\n  totalSum: computed,\r\n  getHighValue: computed\r\n})\r\n\r\nconst store = new Store();\r\n\r\nexport default store;\r\n","import React from 'react';\r\n\r\nexport default () => (\r\n  <div className=\"header\">React with MobX</div>\r\n)\r\n","import React, { Component } from 'react';\r\n\r\nclass Control extends Component {\r\n  handleAddItem = () => {\r\n    const item = { name: null, price: 0};\r\n    let price;\r\n    do {\r\n      item.name = prompt('Item name:');\r\n      price = prompt('Price:');\r\n      item.price = price.length > 0 ? parseInt(price) : 0;\r\n    } while(!item.name.length);\r\n    this.props.store.addNewItem(item);\r\n  }\r\n\r\n  handleClearItem = () => {\r\n    this.props.store.clearList();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"control\">\r\n        <button className=\"btn-add\" onClick={this.handleAddItem}>Add New Item</button>\r\n        <button className=\"btn-clear\" onClick={this.handleClearItem}>Clear Item List</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Control;\r\n","import React from 'react';\r\n\r\nexport default ({ item, price }) => (\r\n  <tr>\r\n    <td>{item}</td>\r\n    <td>{price}</td>\r\n  </tr>\r\n)\r\n","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport TableList from './TableList';\r\n\r\nlet TableView = ({ store }) => (\r\n  <table>\r\n    <tbody>\r\n      <tr>\r\n        <th>Item Name</th>\r\n        <th>Price</th>\r\n      </tr>\r\n      {store.item.map((item, index) => <TableList key={index} item={item.name} price={item.price} />)}\r\n      <tr>\r\n        <td>Total</td>\r\n        <td>{store.totalSum}</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n)\r\n\r\nTableView = observer(TableView);\r\n\r\nexport default TableView;\r\n","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nlet HighPrice = ({ store: { getHighValue } }) => (\r\n  getHighValue && <div className=\"high-price\">\r\n    <p>Max Price: Your item {getHighValue.name} costs {getHighValue.price}</p>\r\n  </div>\r\n)\r\n\r\nHighPrice = observer(HighPrice);\r\n\r\nexport default HighPrice;\r\n","import React from 'react';\r\n\r\nexport default () => (\r\n  <ul className=\"footer\">\r\n    <li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.reactjs.org\">React</a></li>\r\n    <li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://mobx.js.org\">MobX</a></li>\r\n  </ul>\r\n)\r\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport store from './store';\n\nimport Header from './components/Header';\nimport Control from './components/Control';\nimport TableView from './components/TableView';\nimport HighPrice from './components/HighPrice';\nimport Footer from './components/Footer';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Control store={store} />\n        <TableView store={store} />\n        <HighPrice store={store} />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}